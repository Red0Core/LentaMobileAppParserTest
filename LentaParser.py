import json
import time
from timeit import repeat
from requests import HTTPError
from LentaAPI import LentaAPI

class LentaParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–µ–Ω—Ç–∞ –≤ –ú–°–ö –∏ –ü–∏—Ç–µ—Ä–µ, –≥–¥–µ –±–æ–ª–µ–µ 100 —Ç–æ–≤–∞—Ä–æ–≤"""
    
    TARGET_CITIES = {"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}

    def __init__(self, api: LentaAPI):
        self.api: LentaAPI = api
        self.city_stores = {"–ú–æ—Å–∫–≤–∞": [], "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": []}
    
    def _get_target_stores(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"""
        stores = self.api.get_stores()
        for store in stores["items"]:
            for city in self.TARGET_CITIES:
                if city in store["addressFull"] and store['marketType'] == "HM": # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –ì–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç(–±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤)
                    self.city_stores[city].append(store["id"])
                    break
        
        if not self.city_stores:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ")

    def _get_brand_of_product(self, product_id, max_retries=7, backoff_factor=2):
        """–ü–æ–ª—É—á–∞–µ—Ç –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        attempt = 0
        while attempt < max_retries: # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ —Ü–µ–ª–æ–π –º–∏–Ω—É—Ç—ã
            try:
                data = self.api.get_catalog_item(product_id)
                for attribute in data.get('attributes', []):
                    if attribute['alias'] == 'brand' or attribute['name'] == '–ë—Ä–µ–Ω–¥' or attribute['slug'] == 'brand':
                        return attribute['value']
                
                return "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞"
            except HTTPError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
                if e.response.status_code == 429:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –Ω–∞ {backoff_factor ** attempt} —Å–µ–∫—É–Ω–¥")
                attempt += 1
                time.sleep(backoff_factor ** attempt)

    def _parse_products(self, category_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏"""
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}...")
        data = self.api.get_catalog_items(category_id)
        products = []

        for item in data["items"]:
            if item["features"]["isBlockedForSale"] and item["count"] > 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

            products.append({
                "id": item["id"],
                "name": item["name"],
                "brand": self._get_brand_of_product(item["id"]),
                "regular_price": item["prices"]["costRegular"] / 100,
                "promo_price": item["prices"]["cost"] / 100
            })
            print(f"üõí {item['name']} ({item['id']}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏!")
        return products

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self._get_target_stores()

        products = []
        moscow_stores = self.city_stores.get("–ú–æ—Å–∫–≤–∞", [])
        piter_stores = self.city_stores.get("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", [])

        for moscow_store in moscow_stores:
            print(f"\nüìç –ú–æ—Å–∫–≤–∞, –º–∞–≥–∞–∑–∏–Ω ID: {moscow_store}")
            self.api.set_delivery(moscow_store)
            self.api.set_store(moscow_store)
            time.sleep(2)

            moscow_items = []
            categories = self.api.get_categories()
            category_moscow_id = None
            for category in categories:
                print(f"–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category['name']}...")
                items = self.api.get_catalog_items(category["id"])
                if items and items["total"] >= 100:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {items['total']} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}!")
                    category_moscow_id = category["id"]
                    moscow_items = items

                    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤ –ø–∏—Ç–µ—Ä–µ –Ω—É–∂–Ω—É—é –Ω–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                    for piter_store in piter_stores:
                        print(f"\nüìç –ü–∏—Ç–µ—Ä, –º–∞–≥–∞–∑–∏–Ω ID: {piter_store}")
                        self.api.set_delivery(piter_store)
                        self.api.set_store(piter_store)
                        time.sleep(2)

                        repeat_items = []
                        piter_items = self.api.get_catalog_items(category_moscow_id)
                        if piter_items and piter_items['total'] > 100:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {piter_items['total']} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']} –≤ –ü–∏—Ç–µ—Ä–µ!")
                            
                            # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            for moscow_item in moscow_items['items']:
                                for piter_item in piter_items['items']:
                                    if moscow_item['id'] == piter_item['id'] \
                                        and moscow_item['count'] > 0 \
                                        and piter_item['count'] > 0:

                                        repeat_items.append(moscow_item)

                        if len(repeat_items) >= 100:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(repeat_items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –æ–±–æ–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö!")

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫
                            for item in repeat_items:
                                products.append({
                                    "id": item["id"],
                                    "name": item["name"],
                                    "brand": self._get_brand_of_product(item["id"]),
                                    "regular_price": item["prices"]["costRegular"] / 100,
                                    "promo_price": item["prices"]["cost"] / 100
                                })
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(repeat_items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫!")
                            return products
                        else:
                            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–±–æ–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –±–æ–ª—å—à–µ 100, –∞ –∏–º–µ–Ω–Ω–æ {len(repeat_items)}")
                            
            if category_moscow_id is None:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–æ–ª–µ–µ —á–µ–º 100 —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –ú–æ—Å–∫–≤–µ, –º–∞–≥–∞–∑–∏–Ω ID: {moscow_store}")
                continue

    def save_results(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON"""
        with open("lenta_products_piter_moscow.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ lenta_products_piter_moscow.json")

if __name__ == "__main__":
    api = LentaAPI()
    parser = LentaParser(api)
    
    results = parser.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser.save_results(results)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
