import json
import pprint
import time
from requests import HTTPError
from LentaAPI import LentaAPI
import random

class LentaParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–µ–Ω—Ç–∞ –≤ –ú–°–ö –∏ –ü–∏—Ç–µ—Ä–µ, –≥–¥–µ –±–æ–ª–µ–µ 100 —Ç–æ–≤–∞—Ä–æ–≤"""
    
    TARGET_CITIES = {"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}

    def __init__(self, api: LentaAPI):
        self.api: LentaAPI = api
        self.city_stores = {"–ú–æ—Å–∫–≤–∞": [], "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": []}
    
    def _get_target_stores(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"""
        stores = self.api.get_stores()
        for store in stores["items"]:
            for city in self.TARGET_CITIES:
                if city in store["addressFull"] and store['marketType'] == "HM": # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –ì–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç(–±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤)
                    self.city_stores[city].append(store["id"])
                    break
        
        if not self.city_stores:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ")

    def _get_brand_of_product(self, product_id, max_retries=7, backoff_factor=2):
        """–ü–æ–ª—É—á–∞–µ—Ç –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        attempt = 0
        while attempt < max_retries: # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ —Ü–µ–ª–æ–π –º–∏–Ω—É—Ç—ã
            try:
                data = self.api.get_catalog_item(product_id)
                for attribute in data.get('attributes', []):
                    if attribute['alias'] == 'brand' or attribute['name'] == '–ë—Ä–µ–Ω–¥' or attribute['slug'] == 'brand':
                        return attribute['value']
                
                return "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞"
            except HTTPError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
                if e.response.status_code == 429:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –Ω–∞ {backoff_factor ** attempt} —Å–µ–∫—É–Ω–¥")
                attempt += 1
                time.sleep(backoff_factor ** attempt)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self._get_target_stores()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ú–°–ö
        moscow_stores = self.city_stores.get("–ú–æ—Å–∫–≤–∞", [])
        moscow_store = random.choice(moscow_stores)
        print(f"\nüìç –ú–æ—Å–∫–≤–∞, –º–∞–≥–∞–∑–∏–Ω ID: {moscow_store}")
        self.api.set_delivery(moscow_store)
        self.api.set_store(moscow_store)
        moscow_categories_level_1 = {
            x['slug']: x['id']
            for x in self.api.get_categories()
            if x['level'] == 1
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ü–∏—Ç–µ—Ä–µ
        piter_stores = self.city_stores.get("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", [])
        piter_store = random.choice(piter_stores)
        print(f"\nüìç –ü–∏—Ç–µ—Ä, –º–∞–≥–∞–∑–∏–Ω ID: {piter_store}")
        self.api.set_delivery(piter_store)
        self.api.set_store(piter_store)
        piter_categories_level_1 = {
            x['slug']: x['id']
            for x in self.api.get_categories()
            if x['level'] == 1
        }

        # –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        common_categories = set(moscow_categories_level_1.keys()) & set(piter_categories_level_1.keys())
        for category_slug in common_categories:
            print(f"\nüîç –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º—Å–∫
            self.api.set_delivery(moscow_store)
            self.api.set_store(moscow_store)
            moscow_items = self.api.get_catalog_items(moscow_categories_level_1[category_slug])
            print("–î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 5 —Å–µ–∫—É–Ω–¥")
            time.sleep(5)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–∏—Ç–µ—Ä–µ
            self.api.set_delivery(piter_store)
            self.api.set_store(piter_store)
            piter_items = self.api.get_catalog_items(piter_categories_level_1[category_slug])
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            if piter_items['total'] < 100 or moscow_items['total'] < 100:
                print("‚ùå –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ id
            moscow_ids = {item["id"]: item for item in moscow_items['items'] if item["count"] > 0 and not item["features"]["isBlockedForSale"]}
            piter_ids = {item["id"]: item for item in piter_items['items'] if item["count"] > 0 and not item["features"]["isBlockedForSale"]}
            common_products = [
                {
                    "id": item["id"],
                    "name": item["name"],
                    "regular_price": item["prices"]["costRegular"] / 100,
                    "promo_price": item["prices"]["cost"] / 100
                }
                for item_id, item in moscow_ids.items()
                if item_id in piter_ids
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if len(common_products) < 100:
                print("‚ùå –ù–µ—Ö–≤–∞—Ç–∫–∞ –æ–±—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
                continue

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(common_products)} –æ–±—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
            
            # –î–æ–±–∞–≤—è–ª–µ–º –±—Ä–µ–Ω–¥—ã –∫ —Ç–æ–≤–∞—Ä–∞–º
            for common_products_item in common_products:
                common_products_item["brand"] = self._get_brand_of_product(common_products_item["id"])
                print(f"üõí {common_products_item['name']} ({common_products_item['id']}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫" )

            return common_products
        
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≥–¥–µ –±–æ–ª—å—à–µ 100 –æ–±—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ")
        return []

    def save_results(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON"""
        with open("lenta_products_piter_moscow.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ lenta_products_piter_moscow.json")

if __name__ == "__main__":
    api = LentaAPI()
    parser = LentaParser(api)
    
    results = parser.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser.save_results(results)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
