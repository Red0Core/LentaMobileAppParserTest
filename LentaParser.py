import json
import time
from requests import HTTPError
from LentaAPI import LentaAPI

class LentaParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–µ–Ω—Ç–∞ –≤ –ú–°–ö –∏ –ü–∏—Ç–µ—Ä–µ, –≥–¥–µ –±–æ–ª–µ–µ 100 —Ç–æ–≤–∞—Ä–æ–≤"""
    
    TARGET_CITIES = {"–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}

    def __init__(self, api: LentaAPI):
        self.api: LentaAPI = api
        self.city_stores = {}
    
    def _get_target_stores(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ"""
        stores = self.api.get_stores()
        for store in stores["items"]:
            for city in self.TARGET_CITIES:
                if city in store["addressFull"]:
                    self.city_stores[city] = store["id"]
                    break
        
        if not self.city_stores:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ")

    def _get_suitable_category(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≥–¥–µ –±–æ–ª–µ–µ 100 —Ç–æ–≤–∞—Ä–æ–≤"""
        categories = self.api.get_categories()

        for category in categories:
            print(f"–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category['name']}...")
            items = self.api.get_catalog_items(category["id"])
            if items and items["total"] >= 100:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {items['total']} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}!")
                return category["id"], category["name"]
            
        return None, None

    def _get_brand_of_product(self, product_id, max_retries=7, backoff_factor=2):
        """–ü–æ–ª—É—á–∞–µ—Ç –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        attempt = 0
        while attempt < max_retries: # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ —Ü–µ–ª–æ–π –º–∏–Ω—É—Ç—ã
            try:
                data = self.api.get_catalog_item(product_id)
                for attribute in data.get('attributes', []):
                    if attribute['alias'] == 'brand' or attribute['name'] == '–ë—Ä–µ–Ω–¥' or attribute['slug'] == 'brand':
                        return attribute['value']
                
                return "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞"
            except HTTPError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
                if e.response.status_code == 429:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –Ω–∞ {backoff_factor ** attempt} —Å–µ–∫—É–Ω–¥")
                attempt += 1
                time.sleep(backoff_factor ** attempt)

    def _parse_products(self, category_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏"""
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}...")
        data = self.api.get_catalog_items(category_id)
        products = []

        for item in data["items"]:
            if item["features"]["isBlockedForSale"] and item["count"] > 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

            products.append({
                "id": item["id"],
                "name": item["name"],
                "brand": self._get_brand_of_product(item["id"]),
                "regular_price": item["prices"]["costRegular"] / 100,
                "promo_price": item["prices"]["cost"] / 100
            })
            print(f"üõí {item['name']} ({item['id']}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏!")
        return products

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self._get_target_stores()

        all_results = {}
        for city, store_id in self.city_stores.items():
            if city in all_results:
                print(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue

            print(f"\nüìç –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}, –º–∞–≥–∞–∑–∏–Ω ID: {store_id}")
            self.api.set_delivery(store_id)
            self.api.set_store(store_id)
            time.sleep(2) # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏

            category_id, category_name = self._get_suitable_category()
            if category_id is None:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–æ–ª–µ–µ —á–µ–º 100 —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –≥–æ—Ä–æ–¥–µ: {city}, –º–∞–≥–∞–∑–∏–Ω ID: {store_id}")
                continue

            products = self._parse_products(category_id)

            all_results[city] = products

            time.sleep(2) # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏

        return all_results
    
    def save_results(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON"""
        with open("lenta_products.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ lenta_products.json")

if __name__ == "__main__":
    api = LentaAPI()
    parser = LentaParser(api)
    
    results = parser.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser.save_results(results)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
